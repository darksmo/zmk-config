/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT  0
#define NUM_MODS 1
#define BT_CTRL  2

/ {
    behaviors {
        tap_layer: tap_layer {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_LAYER";
            #binding-cells = <0>;
            bindings =
                <&to 4>,
                <&to 2>;
        };
        morph_rshift_number: morph_rshift_number {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_RSHIFT_NUMBER";
            bindings =
                <&kp RIGHT_SHIFT>,
                <&mo 3>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL)>;
        };
        morph_h_left: morph_h_left {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_H_LEFT";
            bindings =
                <&kp H>,
                <&kp LEFT>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };
        morph_j_down: morph_j_down {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_J_DOWN";
            bindings =
                <&kp J>,
                <&kp DOWN>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };
        morph_k_up: morph_k_up {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_K_UP";
            bindings =
                <&kp K>,
                <&kp UP>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };
        morph_l_right: morph_l_right {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_L_RIGHT";
            bindings =
                <&kp L>,
                <&kp RIGHT>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };
        morph_g_home: morph_g_home {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_G_HOME";
            bindings =
                <&kp G>,
                <&kp HOME>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };
        morph_semi_end: morph_semi_end {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_SEMI_END";
            bindings =
                <&kp SEMICOLON>,
                <&kp END>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };
        morph_bksp_delete: morph_bksp_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_BKSP_DELETE";
            bindings =
                <&kp BACKSPACE>,
                <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };
        morph_gresc_tilde: morph_gresc_tilde {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_GRESC_TILDE";
            bindings =
                <&gresc>,
                <&kp TILDE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };
        morph_lbracket_tmux_prev: morph_lbracket_tmux_prev {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_LBRACKET_TMUX_PREV";
            bindings =
                <&kp LEFT_BRACKET>,
                <&tmux_prev>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };
        morph_rbracket_tmux_next: morph_rbracket_tmux_next {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_RBRACKET_TMUX_NEXT";
            bindings =
                <&kp RIGHT_BRACKET>,
                <&tmux_next>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_triple_eq {
            timeout-ms = <50>;
            key-positions = <40 41 43>;
            bindings = <&macro_triple_equal>;
        };

        combo_layer_numpad {
            timeout-ms = <50>;
            key-positions = <39 30>;
            bindings = <&to 4>;
        };

        combo_layer_bluetooth {
            timeout-ms = <50>;
            key-positions = <39 29>;
            bindings = <&to 2>;
        };

        combo_bootloader {
            timeout-ms = <50>;
            key-positions = <36 38 11>;
            bindings = <&bootloader>;
        };

        combo_minus {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp MINUS>;
        };

        combo_equal {
            timeout-ms = <50>;
            key-positions = <9 10 11>;
            bindings = <&kp EQUAL>;
        };
    };

    macros {
        tmux_prev: tmux_prev {
            compatible = "zmk,behavior-macro";
            label = "TMUX_PREV";
            #binding-cells = <0>;
            bindings = <&kp LC(B) &kp P>;
        };
        tmux_next: tmux_next {
            compatible = "zmk,behavior-macro";
            label = "TMUX_NEXT";
            #binding-cells = <0>;
            bindings = <&kp LC(B) &kp N>;
        };
        macro_triple_equal: macro_triple_equal {
            compatible = "zmk,behavior-macro";
            label = "MACRO_TRIPLE_EQUAL";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp EQUAL &kp EQUAL>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&morph_gresc_tilde     &kp Q     &kp W  &kp E      &kp R          &kp T          &kp Y          &kp U                      &kp I                      &kp O            &kp P  &morph_bksp_delete
         &lt 1 TAB     &kp A     &kp S  &kp D      &kp F  &morph_g_home  &morph_h_left  &morph_j_down                &morph_k_up             &morph_l_right  &morph_semi_end            &kp APOS
    &kp LEFT_SHIFT     &kp Z     &kp X  &kp C      &kp V          &kp B          &kp N          &kp M                  &kp COMMA                    &kp DOT         &kp FSLH     &kp RIGHT_SHIFT
         &kp LCTRL  &kp LALT  &kp LGUI  &to 0  &kp EQUAL      &kp SPACE      &kp SPACE          &mo 3  &morph_lbracket_tmux_prev  &morph_rbracket_tmux_next    &kp BACKSLASH         &lt 3 ENTER
            >;
        };

        num_mods {
            bindings = <
  &kp TILDE      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4    &kp NUMBER_5  &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0        &kp DEL
     &trans           &kp F11       &kp F12     &kp LC(D)        &trans          &trans        &trans        &trans        &trans     &kp LC(L)        &trans       &kp BSLH
&kp PAGE_UP            &kp F1        &kp F2        &kp F3        &kp F4          &kp F5        &kp F6        &kp F7        &kp F8        &kp F9       &kp F10  &kp PAGE_DOWN
     &trans  &kp LG(NUMBER_1)     &kp LS(I)        &trans        &trans  &kp LEFT_SHIFT        &trans        &trans        &trans        &trans        &trans         &trans
            >;
        };

        bt_control {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none  &none       &none       &none  &none  &bt BT_CLR
&none         &none         &none         &none         &none         &none  &none  &none       &none       &none  &none       &none
&none         &none         &none         &none         &none         &none  &none  &none       &none       &none  &none       &none
&none         &none         &none         &to 0         &none         &none  &none  &none  &bt BT_PRV  &bt BT_NXT  &none       &none
            >;
        };

        layer_3 {
            bindings = <
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6   &kp NUMBER_7          &kp NUMBER_8           &kp NUMBER_9           &kp NUMBER_0  &trans
&trans      &kp EXCL   &kp AT_SIGN     &kp POUND    &kp DOLLAR   &kp PERCENT     &kp CARET  &kp AMPERSAND              &kp STAR   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans        &trans        &trans        &trans        &trans        &trans        &trans         &trans  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS         &kp UNDERSCORE  &trans
&trans        &trans        &trans        &trans        &trans        &trans        &trans         &trans        &kp LEFT_BRACE        &kp RIGHT_BRACE               &kp PIPE  &trans
            >;
        };

        macro_1 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans     &kp KP_MINUS  &kp KP_PLUS      &kp KP_PLUS  &kp KP_ENTER     &kp KP_ENTER
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp KP_MULTIPLY    &kp KP_N9        &kp KP_N6     &kp KP_N3       &kp KP_DOT
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &kp KP_DIVIDE    &kp KP_N8  &kp KP_NUMBER_5     &kp KP_N2  &kp KP_NUMBER_0
&trans  &trans  &trans   &to 0  &trans  &trans  &trans           &tog 5    &kp KP_N7  &kp KP_NUMBER_4     &kp KP_N1  &kp KP_NUMBER_0
            >;
        };

        macro_2 {
            bindings = <
&none  &none  &none  &none  &none  &none  &none   &none        &none      &none          &none    &none
&none  &none  &none  &none  &none  &none  &none   &none  &kp PAGE_UP  &kp RIGHT  &kp PAGE_DOWN  &kp DEL
&none  &none  &none  &none  &none  &none  &none   &none       &kp UP   &kp DOWN          &none  &kp INS
&none  &none  &none  &to 0  &none  &none  &none  &trans     &kp HOME   &kp LEFT        &kp END  &kp INS
            >;
        };
    };
};
